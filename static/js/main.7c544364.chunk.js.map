{"version":3,"sources":["components/Wrapper/index.js","components/Jumbotron/index.js","components/Scores/index.js","components/Comments/index.js","components/Cookies/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Jumbotron","class","Scores","count","highest","Comments","Cookies","alt","name","src","image","id","onClick","whenClick","clickedArray","Main","state","cookies","shuffleCards","sort","Math","random","setState","clearArray","length","pop","add","some","el","console","log","push","this","map","cookie","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0qEAOeA,MAJf,SAAiBC,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCC5B,SAASC,IACpB,OACI,yBAAKC,MAAM,6BAEP,wBAAIA,MAAM,aAAV,mBACA,uBAAGA,MAAM,QAAT,iC,MCPG,SAASC,EAAOL,GAC3B,OACI,yBAAKC,UAAU,UACX,4CACA,4BAAKD,EAAMM,OACX,+CAAoB,8BAAON,EAAMO,WCN9B,SAASC,IACpB,OACI,8B,MCAO,SAASC,EAAQT,GAE5B,OACI,yBAAKC,UAAU,OAEX,yBAAKA,UAAU,iBACX,yBACIS,IAAKV,EAAMW,KACXC,IAAKZ,EAAMa,MACXC,GAAId,EAAMc,GACVC,QAAS,kBAAMf,EAAMgB,UAAUhB,EAAMc,S,WCRnDG,EAAe,GAmFNC,E,4MA9EXC,MAAQ,CACJC,UACAd,MAAO,EACPC,QAAS,G,EAGbc,aAAe,WACX,IAAMD,EAAU,EAAKD,MAAMC,QAAQE,MAAK,iBAAM,GAAMC,KAAKC,YAEzD,EAAKC,SAAS,CAAEL,a,EAGpBM,WAAa,SAACT,GACV,KAAOA,EAAaU,QAChBV,EAAaW,MAEjB,OAAOX,G,EAGXY,IAAM,SAACZ,EAAcH,GAejB,OAXcG,EAAaa,MAAK,SAAAC,GAAE,OAAIA,EAAGjB,KAAOA,MAM5CkB,QAAQC,IAAI,2BACZ,EAAKR,SAAS,CAAEnB,MAAO,IACvB,EAAKoB,WAAWT,KANhBA,EAAaiB,KAAK,CAAEpB,OACpB,EAAKW,SAAS,CAAEnB,MAAO,EAAKa,MAAMb,MAAQ,IAC1C,EAAKmB,SAAS,CAAElB,QAAS,EAAKY,MAAMZ,QAAU,KAMlDyB,QAAQC,IAAIhB,GACLA,G,EAIXD,UAAY,SAAAF,GACR,EAAKO,eACLW,QAAQC,IAAInB,GACZ,EAAKe,IAAIZ,EAAcH,I,uDAIjB,IAAD,OACL,OACI,yBAAKb,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,kBAACI,EAAD,CACIC,MAAO6B,KAAKhB,MAAMb,MAClBC,QAAS4B,KAAKhB,MAAMZ,UAExB,kBAACC,EAAD,OAEJ,yBAAKP,UAAU,OACX,yBAAKA,UAAU,OACVkC,KAAKhB,MAAMC,QAAQgB,KAAI,SAAAC,GAAM,OAE1B,kBAAC5B,EAAD,CACIO,UAAW,EAAKA,UAChBF,GAAIuB,EAAOvB,GACXwB,IAAKD,EAAOvB,GACZH,KAAM0B,EAAO1B,KACbE,MAAOwB,EAAOxB,mB,GApE/B0B,aCIEC,E,uKAGjB,OACE,kBAAC,EAAD,KACE,kBAACrC,EAAD,MACA,kBAAC,EAAD,W,GANyBoC,aCAbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.7c544364.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","\n//rfc\nimport React from 'react'\nimport \"./style.css\"\n\nexport default function Jumbotron() {\n    return (\n        <div class=\"jumbotron jumbotron-fluid\">\n\n            <h1 class=\"display-4\">Clicking Memory</h1>\n            <p class=\"lead\">Training Memory with Cookies</p>\n\n        </div>\n    )\n}\n","import React from 'react'\nimport './style.css';\n\nexport default function Scores(props) {\n    return (\n        <div className=\"scores\">\n            <h2>Your scores:</h2>\n            <h1>{props.count}</h1>\n            <h3>Highest scores: <span>{props.highest}</span></h3>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Comments() {\n    return (\n        <div>\n\n        </div>\n    )\n}\n","import React from 'react'\nimport './style.css'\n\n\nexport default function Cookies(props) {\n    // console.log(props)\n    return (\n        <div className=\"col\">\n\n            <div className=\"img-container\">\n                <img\n                    alt={props.name}\n                    src={props.image}\n                    id={props.id}\n                    onClick={() => props.whenClick(props.id)}\n\n                />\n            </div>\n\n        </div>\n\n    )\n}\n","import React, { Component } from 'react'\nimport Scores from \"../Scores\"\nimport Comments from \"../Comments\"\nimport Cookies from \"../Cookies\"\nimport cookies from \"../../cookies.json\"\n\nconst clickedArray = [];\n\nclass Main extends Component {\n\n\n    state = {\n        cookies,\n        count: 0,\n        highest: 0\n    };\n\n    shuffleCards = () => {\n        const cookies = this.state.cookies.sort(() => 0.5 - Math.random());\n        // this.countClick();\n        this.setState({ cookies })\n    }\n\n    clearArray = (clickedArray) => {\n        while (clickedArray.length) {\n            clickedArray.pop()\n        }\n        return clickedArray\n    }\n\n    add = (clickedArray, id) => {\n\n        // const { length } = clickedArray;\n        // const id = length + 1;\n        const found = clickedArray.some(el => el.id === id);\n        if (!found) {\n            clickedArray.push({ id })\n            this.setState({ count: this.state.count + 1 })\n            this.setState({ highest: this.state.highest + 1 })\n        } else {\n            console.log(\"this id already existed\")\n            this.setState({ count: 0 })\n            this.clearArray(clickedArray)\n        }\n        console.log(clickedArray)\n        return clickedArray;\n\n    }\n\n    whenClick = id => {\n        this.shuffleCards();\n        console.log(id)\n        this.add(clickedArray, id)\n\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-3\">\n                        <Scores\n                            count={this.state.count}\n                            highest={this.state.highest}\n                        />\n                        <Comments />\n                    </div>\n                    <div className=\"col\">\n                        <div className=\"row\">\n                            {this.state.cookies.map(cookie => (\n\n                                <Cookies\n                                    whenClick={this.whenClick}\n                                    id={cookie.id}\n                                    key={cookie.id}\n                                    name={cookie.name}\n                                    image={cookie.image}\n\n                                />\n\n                            ))}\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Main;\n\n\n","import React, { Component } from \"react\";\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Main from './components/Main';\n\n// import Rules from \"./components/Rules\";\n// import Scores from './components/Scores'\n// import Comments from \"./components/Comments\"\n// import Cookies from \"./components/Cookies\";\n\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <Wrapper>\n        <Jumbotron />\n        <Main />\n      </Wrapper>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}